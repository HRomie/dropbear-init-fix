#!/bin/sh

# Hamy - www.hamy.io

# Any error, should result in script failure
set -e

PREREQ="dropbear"
COMMANDS_LIST="md5sum cut cp sed mv"
DB_INIT_BTM_ORG="$DESTDIR/scripts/init-bottom/dropbear"
DB_INIT_BTM_TMP="$DESTDIR/scripts/init-bottom/dropbear-int-btm-fix.tmp1"
BB_INIT_ORG="$DESTDIR/bin/busybox"
BB_INIT_FULL="/bin/busybox-full"
BB_SYSTEM="/bin/busybox"
OLD_IFS="$IFS"
DB_INIT_VER=""

# Handles errors
error_out()
{
  echo "************* WARNING *************"
  echo "$1"
  # If we have created the tmp file, it's time to delete it
  if [ -f "$DB_INIT_BTM_TMP" ]; then
    rm "$DB_INIT_BTM_TMP" || echo "Could not delete \"$DB_INIT_BTM_TMP\""
  fi
  echo "\"$0\" will not be applied"
  echo "***********************************"
  # exit code is always 0 so it wouldn't stop the initram build.
  # This means that worst case scenario, this script would simply
  # act as if it hadn't been existed.
  exit 0
}

# Calculating md5 hashes
md5hash()
{
  echo $(md5sum "$1" | cut -d ' ' -f 1)
}

# Handles the prereqs functionality of the initramfs-tools
prereqs()
{
  echo "$PREREQ"
}

# Protect the script from direct execution
if [ "$DESTDIR" = "" ]; then
  echo "Error: This script is not be run directly" >&2
  exit 1
fi

# Handles the prereqs functionality of the initramfs-tools
case $1 in
  prereqs)
    prereqs
    exit 0
    ;;
esac

# Ensuring all the required commands exist
IFS=" "
for i in $COMMANDS_LIST; do
  if ! command -v $i >/dev/null; then
    error_out "\"$i\" command not be found in PATH (how is that even possible?)"
  fi
done
IFS="$OLD_IFS"

# We need to import the provided hook functions
[ -r /usr/share/initramfs-tools/hook-functions ] || error_out "Could not find the hook functions"
. /usr/share/initramfs-tools/hook-functions

# Is busybox disables in initramfs.conf?
[ n = "$BUSYBOX" ] && error_out "busybox utilities are disabled for initram"

# Testing the presence of dropbear init-bottom script
[ -x "$DB_INIT_BTM_ORG" ] || error_out "Could not find dropbear init-bottom script (is dropbear-initramfs installed?)"
[ -h "$DB_INIT_BTM_ORG" ] && error_out "dropbear init-bottom script is a symlink (why?)"

# Supported version must specifically added here. This is to reduce the chance
# of breaking things after an upgrade to dropbear-initramfs. If the script in question
# doesn't change between upgrade though, it might still work.
case "$(md5hash $DB_INIT_BTM_ORG)" in
  # v2017.75-3build1
  506f966b4f3df7fdb41f98d5d54fd9e4)
    DB_INIT_VER=75
    ;; 
  *)
    error_out "dropbear init-bottom script hash did not match. This is probably due to updates to dropbear-initramfs package. This calls for new evaluation of the script."
    ;;
esac

# Check the existence of the original busybox binary added by busybox-initramfs
[ -x "$BB_INIT_ORG" ] || error_out "Could not find busybox location in initram"

# Check the existence of the busybox we want to also include in initramfs
[ -x "$BB_SYSTEM" ] || error_out "Either busybox or busybox-static package must be installed on the system"

# Ensure the original busybox lacks extended options, and the new one does not.
# We do this by actually executing both busybox executables. This should be safe
# as non-root users, are not allowed to make changes to the binaries in either location.
if $BB_INIT_ORG ps -o ppid >/dev/null 2>&1; then
  error_out "busybox initram, seems to be supporting extended options now. No patch is needed"
elif ! $BB_SYSTEM ps -o ppid >/dev/null 2>&1; then
  error_out "\"$BB_SYSTEM\" on the system, does not support extended options"
fi

# We do the patching on a tmp file first
if ! cp -p "$DB_INIT_BTM_ORG" "$DB_INIT_BTM_TMP"; then
  error_out "Could not create the tmp file"
fi

# This is where the magic happens. Basically What it does, is that it makes the
# offending commands in dropbear init-bottom script, to be run by 
# the busybox-full binary (the arguments used in those commands, require
# a busybox build with the support of extended options).
# It does so, based on the specific versions, and we top it off we check
# the md5 hash of the pacthed file.
case $DB_INIT_VER in
  75)
    sed -i "s_ps -o_$BB_INIT_FULL &_g" "$DB_INIT_BTM_TMP"
    sed -i "s_kill -TERM -_$BB_INIT_FULL &_g" "$DB_INIT_BTM_TMP"
    [ "$(md5hash $DB_INIT_BTM_TMP)" = "8e0c25b1f03b26f42a123cae35e6837f" ] || error_out "sed patch mismatch"
    ;;
  *)
    error_out "Could not match against any valid patch (This should have never happened)"
    ;;
esac

# Include the busybox-full binary
copy_exec "$BB_SYSTEM" "$BB_INIT_FULL"
[ -x "$DESTDIR/$BB_INIT_FULL" ] || error_out "Could not copy the busybox full binary into the initram"

# Now it should be safe to replace the original dropbear init-bottom script.
# This is the last step and it really should not fail at this point, but if it does,
# we're not going to handle it. Instead, we let the script fail so initram build is stopped.
# That way the user can investigate wth is going on.
mv -f "$DB_INIT_BTM_TMP" "$DB_INIT_BTM_ORG"

# And we are done!
echo "successfully applied: $0"

